---
layout: post
title: "[Paper Reading] A Cost-Effective, Scalable, and Portable IoT Data Infrastructure for Indoor Environment Sensing"
date: 2022-01-06 09:00:00 +0300
description: 2021_A Cost-Effective, Scalable, and Portable IoT Data Infrastructure for Indoor Environment Sensing # Add post description (optional)
img: 20220106_post_main.PNG # Add image post (optional) 280px, 350px, 470px, 700px, 940px
fig-caption: # Add figcaption (optional)
category: [PR]
tags: [IoT, Indoor Environment, Reading]
---

**Publication year:** 2021 <br>
**Authors:** Sheik Anik, Xinghua Gao, Na Meng, Philip Agee, Andrew McCoy <br>
**DOI:** [https://arxiv.org/abs/2110.14042?context=cs](https://arxiv.org/abs/2110.14042?context=cs)

# Introduction
- Building comsume about 40% of total consumed energy, and half of that goes to Heating, Ventilation, and air conditioning (VAC) systems. A significant portion of this consumed energy is waasted, and using a proper monitoring and control system can reduce this waste significantly.
- Even though many building systems already incorporate proprietary networks of sohpisticated sensors and devices, they normally have very limited inter-system connectivity or exposure to the larger networks of IoT devices, which hinders the establishment of a comprehensive IoT data infrastructure for building automation and management
- Major challenges in establishing a comprehensive IoT data infrastructure for buildings
    - Cost: High cost of the sensing devices is a major reason why building owners and managers are normally reluctant to install a data system iin the first place
    - Installation: Installation of building systems can be a challenge for existing buildings
    - Interoperability: most of the data generated by commercial building systems are self-proprietary because most of the existing building systems are lacking interoperabiltiy
    - Scalability: For many building systems, after the initial installation during construction, it is usually difficult to modify the system by adding or removing features, or increasing the coverage to other building spaces
- In this paper, a cost-effective, scalable, portable, and distributed indoor environment sensing system, Building Data Lite (DBL) was presentedto address the building data availability challenges, and thus, to provide a means for establishing the IoT data infrastructure of a smart building
- To collect indoor environment data, the system has three types of components:
    - sensing nodes: an array of digital and analogue sensors to collect data from the surroundings
    - central nodes: a web-based central server that integrates data from all local databases and visualizes data on a website
    - inter-node connections: linking sensing nodes with the central node
- The research team developed a prototype of the BDL system to demonstrate how it overcomes the limitations of existing building systems
    - Cost: it is built with Raspberry Pi and compatible sensor modules
    - Installation: The distributed sensing nodes are connected with a centralized server via wireless communication
    - Comprehensiveness: it uses multiple sensors to collect different environment data simultaneously, and establish a comprehensive database that can be used for developing multiple smart building applications
    - Scalability: it is customizable, and the users have the option to add or remove devices, sensor modules, and functions
    - Portability: the nodes are connected to the central server via local WiFi or the Internet, which maeks them portable to anly location with power supply and under the coverage of wireless network
    - Open-source: the source code has been published by the authors vi GitHub

# The System Design of DBL
- System Architecture
    - It consists of a central server and multiple individual sensing nodes, which are built around Raspberry Pi
    - All software used in the system is open sourced, and both the database system used, MariaDB and MySQL, are free.
    - The system software including both server adn sensing node has been made publicly available and can be found in the GitHub repository
- Central Server
    - It is designed as a web-based system and desgined to use Asyschronous JavaScript and XML (AJAX) to create a fast and dynamic GUI
    - JQuery and Chart.js libraries are used for data visualization
- Sensing Node
    - In each sensing node, teh Raspberry pi connects with multiple sensor modules to collect data from the surroudnings.
    - The sensors are connected via the GPIO ports of the Raspberry Pi, with a GPIO extension bread board for easier deployment
- Database Configuration and Data Transmission
    - There are two separate database designs in the BDL system. One is used in the sensing nodes and another in the central server
    - The local database system used in each sensing module is MariaDB, which is usual for Raspberry Pi system. The central database is created using MySQL
- Network Configuration
    - The BDL system is designed to run in both local and global connectivity.
    - For the global setup, the server needs to be running in a live domain. Many live domain hosting providers are capable of running PHP server.
    - If a server is deployed in local mode (on one of the Raspberry Pis rather than on an independent computer), then all sensing nodes and the server needs to be connected to the same network. If working in the global mode, then each node and the server need to be connected to the Internet.
- Data Integration
    - In each sensing node, the sensors output data to the connect Raspberry Pi either directly or through an analogue to digital converter (ADC), and the Raspberry Pi receives the data through the GPIO ports
    - The Raspberry Pi collects all sensor readings each minute and merge them together to make a record. The record is then stored in the local database with a timestamp and other necessary information, such as location and the identifiers of sensor modules.
    - In the prototype system, the sensing node is programmed to communicate with the central server once every hour (which can be changed).
- Graphical User Interface
    - The BDL system’s GUI has five functions, which are
        - 1) data visualization
        - 2) data download
        - 3) error log download
        - 4) add or remove sensing nodes (Raspberry Pis)
        - 5) modify sensor modules on each sensing node

# Prototype Deployment
- The BDL system architecture is designed in a way that it is capable of including or removing sensing nodes and sensors of each node as per the need.
- Any sensor that is capable of communicating through the General-Purpose Input Output (GPIO) ports of the Raspberry Pi system can be connected in this system.
- The first two prototypes of the BDL system were developed using the following sensors: DHT11 (temperature and humidity) sensor, light sensor, sound sensor, vibration sensor, motion sensor, MQ2 (smoke, natural gas and carbon mono-oxide) sensor.
- To demonstrate the flexibility and stability of the sensing nodes, a total of 30 nodes including all three variants have been developed and deployed which are continuously collecting data for over 4 months.

# Case Study
- To evaluate and demonstrate the capabilities of the BDL system, the research team has been conducting a case study.
- A total of 48 sensing nodes are being deployed and collecting data continuously in 12 households (four sensing nodes each, distributed in different rooms) of a affordable community in Richmond, VA.
- The data collected by the sensing nodes of BDL prototype 3 system are being transferred to a live cloud server.
- The research team use BDL prototype version 3 for the case study because it is more compact and, with the 3D-printed cases, it is more acceptable for the house occupants participating in this study.
- BDL v3 uses Raspberry Pi Zero with built-in WiFi module, connecting with the Enviro or Enviro Plus sensor bundles. The Enviro Plus bundle includes proximity, humidity, pressure, light, sound, and gas sensors.
- The web-based GUI displays graphs of the data collected from the 12 houses and stored in the central server
- The deployed devices in this case study are planned to collect data for at least one year. The data will be collected with full respect to the privacy of the tenants.
- These indoor environment data will be used for research studies related to low-income households, the performance of manufactured houses, and other related topics.

# Discussion
- Challenges and Solutions
    - Analog signal
        - The Raspberry Pi, as the center of each sensing node, can only receive digital signals, but some of the sensor provide only analog signals (e.g. the gas sensor MQ2). This issue is solved by using an additional analogueto-digital converter circuit.
    - Binary sensors
        - Some of the sensors provide only yes-no data. The authors implemented a beat counting system to count the frequency of sounds during a time interval to achieve an understandable reading from the sensor.
    - Sudden crashes
        - There were some sudden run-time crashes during the data collection phase. The problems were caused by faults in sensor readings, bad connection, overloaded access, and unavailability of server.
        -  These exceptions were caught and logged in local database and later the log is transferred to the central database
    - Data synchronization
        - The authors solved this issue using a two-fold solution combined together.
            - First, a routine update mechanism between sensing node and central server was designed. Instead of transferring data records, we transferred files consisting of multiple records.
            - Second, a record checking system was implemented in the sensing node to keep data consistency. The databases in both sensing nodes and the central server were restructured to reduce the number of entries
    - File size limit
        - The file size increases as the number of unsent records piles up. The problem occurs when the file size exceeds 2 Megabytes, which is the default limit of file transfer in the local PHP server. The authors addressed this issue by manually overwriting the maximum transferable file size limit in the “php.ini” file.
- Potential Use Cases
    - Space utilization analysis
        - These data can be used for space utilization analysis to deduce whether the space is being used properly or not; is it underused or is it overused; what is the indoor environment when the space is used, etc.
    - Building control system
        -  The BDL system can provide data to, or be merged with a building control system to enable automated building control.
    - Emergency management system
        - It can warn the building owner if it detects any abnormal characteristics in the indoor environment.
    - Activity monitoring
        - It can provide data to, or be merged with a building security system that can warn the building owner that there is an unusual activity, such as burglary, in a particular building space.
- Limitations and Future Research
    - Some of the sensors require fine-tuning and calibration to provide a more accurate reading. The prototype has been calibrated, but for more accurate results, the system needs to be calibrated in different environmental conditions.
    - The current prototype has only been tested in the local mode because of the lack of a live server. In the future, the system will be designed in a way that it will be able to switch between local mode and global mode.

# Conclusion
- This paper presents the research study that aims to establish a distributed wireless sensing network for collecting indoor environment data in existing building
- This research contributes to the body of knowledge by proposing an innovative way for establishing a cost-effective, scalable, and portable IoT data infrastructure for indoor environment sensing.
- The data can be generated by the prototypes involve temperature, humidity, light, sound, flame, vibration, motion, smoke, carbon monoxide (CO), and liquefied petroleum gas (LPG)
- Although the proposed BDL system’s first three prototypes have been developed and experimented with, the system is still under development and require more adjustments and modifications to perform better.
